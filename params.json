{"name":"jQuery.plainModal","tagline":"The simple jQuery Plugin for customizable modal windows.","body":"# jQuery.plainModal\r\n\r\nThe simple jQuery Plugin for customizable modal windows. plainModal has basic functions only, and it does nothing for styles. It has no image files and no CSS files.  \r\n\r\nMany great plugins already exist.\r\n\r\n- The gorgeous plugins which has many functions and rich styles.\r\n- The simple plugins which has small functions and customizable styles.\r\n\r\nThe many web sites use same functions almost. And these have different styles.  \r\nplainModal has basic functions for showing modal windows. That's all. The styling it is your job. You can free style it to perfect match for your web site.\r\n\r\nplainModal do:\r\n\r\n- Showing specified element as modal window, and hiding it.\r\n- Covering a page with a overlay.\r\n- Avoiding focusing outer elements of modal window. (by pressing Tab key)\r\n- Avoiding scrolling a page window.\r\n- Hiding modal window when Escape key is pressed.\r\n\r\n```js\r\n// Show modal window. <div id=\"modal\"> is styled via your CSS.\r\n$('#modal').plainModal('open');\r\n// Hide modal window.\r\n$('#modal').plainModal('close');\r\n```\r\n\r\n## Methods\r\n\r\n### <a name =\"open\">Open</a>\r\n\r\n```js\r\nelement.plainModal('open'[, options])\r\n```\r\n\r\nShow specified element as modal window.  \r\nIf `options` (see [Options](#options)) is specified, element is initialized with specified `options` before it is shown. If element is not initialized yet, element is initialized even if `options` is not specified.  \r\nA element can be initialized by new `options` any number of times.\r\n\r\n### <a name =\"close\">Close</a>\r\n\r\n```js\r\nelement.plainModal('close')\r\n```\r\n\r\nHide modal window.\r\n\r\n### <a name =\"initialize\">Initialize</a>\r\n\r\n```js\r\nelement.plainModal([options])\r\n```\r\n\r\nInitialize specified element as modal window.  \r\nThe [Open](#open) method can initialize too. This is used to initialize without showing modal window at voluntary time.  \r\nYou can specify `options` to every [Open](#open) method. But, if `options` of a element isn't changed, re-initializing a element isn't needed. Then, you specify `options` to only first [Open](#open) method, or use this method for initializing only once.  \r\nIf you don't customize [Options](#options) (using default all), this method isn't needed because `options` isn't specified to [Open](#open) method, and element is initialized at only first time.\r\n\r\nIn this code, unneeded initializing is done again, again, and again.\r\n\r\n```js\r\n$('#open-button').click(function() {\r\n  // Same initializing per every showing\r\n  $('#modal').plainModal('open', {duration: 500});\r\n});\r\n```\r\n\r\nIn this code, initializing is done at once.\r\n\r\n```js\r\n// Initialize only once\r\nvar modal = $('#modal').plainModal({duration: 500});\r\n$('#open-button').click(function() {\r\n  // Show without initializing\r\n  modal.plainModal('open');\r\n});\r\n```\r\n\r\nIn this code, initializing is done at once.\r\n\r\n```js\r\n$('#open-button').click(function() {\r\n  // Initializing is done at only first time\r\n  modal.plainModal('open');\r\n});\r\n```\r\n\r\n## <a name =\"options\">Options</a>\r\n\r\nA `options` Object can be specified to [Open](#open) method or [Initialize](#initialize) method. This Object can have following properties.\r\n\r\n### `offset`\r\n\r\nType: Object  \r\nDefault: Calculated center position\r\n\r\nA Object that has `left` and `top`, relative to the view area.\r\n\r\n```js\r\n$('#modal').plainModal({offset: {left: 100, top: 50}});\r\n```\r\n\r\n### `overlay`\r\n\r\nType: Object  \r\nDefault: `{color: '#000', opacity: 0.3}`\r\n\r\nA Object that has `color` and `opacity` of overlay.\r\n\r\n```js\r\n$('#modal').plainModal({overlay: {color: '#fff', opacity: 0.5}});\r\n```\r\n\r\n### `closeClass`\r\n\r\nType: String  \r\nDefault: `'plainmodal-close'`\r\n\r\nIf the element that has this class name is found, the [Close](#close) method is attached to `click` event of it.\r\n\r\n```html\r\n<div>\r\n<p>Lorem ipsum dolor ...</p>\r\n<div class=\"plainmodal-close\">Close</div>\r\n</div>\r\n```\r\n\r\n### `duration`\r\n\r\nType: Number  \r\nDefault: `200`\r\n\r\nA number determining how long (milliseconds) the effect animation for showing and hiding modal window will run.\r\n\r\n### `effect`\r\n\r\nType: Object  \r\nDefault: `{open: $.fn.fadeIn, close: $.fn.fadeOut}`\r\n\r\nA Object that has `open` and `close` Functions for showing and hiding modal window.  \r\nThese Functions are called with `duration` Number (see above) and `complete` Function.  \r\nIt's same to standard effect methods of jQuery (slideDown(), slideUp(), animate(), etc.). Therefore, those methods can be specified.\r\n\r\n```js\r\n$('#modal').plainModal({effect: {open: $.fn.slideDown, close: $.fn.slideUp}});\r\n```\r\n\r\nCustom animation:\r\n\r\n```js\r\n$('#modal').plainModal({\r\n  offset: {left: 300, top: 100},\r\n  duration: 500,\r\n  effect: {\r\n    open: function(duration, complete) {\r\n      this.css({\r\n        display:          'block',\r\n        marginTop:        -100 - this.outerHeight()\r\n      })\r\n      .animate({marginTop: 0}, duration, complete);\r\n    },\r\n    close: function(duration, complete) {\r\n      this.animate({\r\n        marginTop:        -100 - this.outerHeight()\r\n      }, duration, function() {\r\n        $(this).css({display: 'none'});\r\n        complete();\r\n      });\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nThese Functions can ignore `duration`, but it must call `complete`, when the effect was finished.\r\n\r\n```js\r\n$('#modal').plainModal({\r\n  effect: {\r\n    open: function(duration, complete) {\r\n      var self = this.css({\r\n        display:          'block',\r\n        color:            '#fff',\r\n        backgroundColor:  '#fff'\r\n      });\r\n      setTimeout(function() {\r\n        self.css({color: '', backgroundColor: ''});\r\n        complete();\r\n      }, 500);\r\n    },\r\n    close: function(duration, complete) {\r\n      var self = this.css({\r\n        color:            '#fff',\r\n        backgroundColor:  '#fff'\r\n      });\r\n      setTimeout(function() {\r\n        self.css({display: 'none'});\r\n        complete();\r\n      }, 500);\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Release History\r\n * 2013-12-21\t\t\tv0.1.0\t\t\tInitial release.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}